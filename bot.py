import asyncio
import re
import logging
import os
from datetime import datetime
from aiogram import Bot, Router, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.exceptions import TelegramNetworkError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("telegram_bot")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN", "8086981587:AAFTmTf7H-sMNtWyrBpqyu3Qq4Ds0oFAibs")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "1386655173")
SUPPORT_USERNAME = "@yasikvirtss"
REVIEWS_CHANNEL = "https://t.me/yasikvirtsotzivi"
PAYOP_TEST_LINK = "https://payop.com/test"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class OrderForm(StatesGroup):
    action = State()
    project = State()
    server = State()
    amount = State()
    payment_type = State()
    confirm = State()

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —Å–µ—Ä–≤–µ—Ä–∞—Ö
PROJECT_SERVERS = {
    "GTA5RP": [
        "Downtown", "Burton", "Strawberry", "Rockford", "Vinewood", "Alta", "Blackberry",
        "Del Perro", "Insquad", "Davis", "Sunrise", "Harmony", "Rainbow", "Redwood",
        "Richman", "Hawick", "Eclipse", "Grapeseed", "La Mesa", "Murrieta", "Vespucci"
    ],
    "Majestic": [
        "New York", "San Diego", "Detroit", "Los Angeles", "Miami", "Washington", "Dallas",
        "Las Vegas", "Chicago", "Atlanta", "San Francisco", "Houston", "Seattle", "Boston"
    ]
}
PROJECTS = list(PROJECT_SERVERS.keys())

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
BACK_BUTTON = types.KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started the bot")
    await state.clear()

    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –≤ –ª—É—á—à–∏–π –º–∞–≥–∞–∑–∏–Ω –≤–∏—Ä—Ç–æ–≤! üëëüòé\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –≤–∏—Ä—Ç—ã –¥–ª—è GTA 5 RP –∏ Majestic RP."
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=welcome_message
    )

    await asyncio.sleep(1)

    await state.set_state(OrderForm.action)
    await bot.send_message(
        chat_id=message.chat.id,
        text="üéÆ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å"), types.KeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å")],
                [types.KeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
                [BACK_BUTTON]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@router.message(OrderForm.action)
async def process_action(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await bot.send_message(
            chat_id=message.chat.id,
            text="üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /start",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    if text == "üìù –û—Ç–∑—ã–≤—ã":
        logger.info(f"User {user_id} requested reviews")
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"üìù –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Ç–∑—ã–≤–∞–º–∏: {REVIEWS_CHANNEL}\n\n"
                 "üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /start",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
        return

    if text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        logger.info(f"User {user_id} requested support")
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: {SUPPORT_USERNAME}\n\n"
                 "üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /start",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
        return

    valid_actions = ["üí∏ –ö—É–ø–∏—Ç—å", "üí∞ –ü—Ä–æ–¥–∞—Ç—å"]
    if text not in valid_actions:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å"), types.KeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å")],
                    [types.KeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
                    [BACK_BUTTON]
                ],
            resize_keyboard=True,
            one_time_keyboard=True
            )
        )
        return

    action = text.replace("üí∏ ", "").replace("üí∞ ", "")
    logger.info(f"User {user_id} selected action: {action}")
    await state.update_data(action=action)
    await state.set_state(OrderForm.project)

    project_buttons = [[types.KeyboardButton(text=project) for project in PROJECTS]]
    project_buttons.append([BACK_BUTTON])

    await bot.send_message(
        chat_id=message.chat.id,
        text=f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: *{action}*.\n"
             "üåê –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=project_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
@router.message(OrderForm.project)
async def process_project(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.action)
        await bot.send_message(
            chat_id=message.chat.id,
            text="üéÆ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å"), types.KeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å")],
                    [types.KeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
                    [BACK_BUTTON]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    if text not in PROJECTS:
        project_buttons = [[types.KeyboardButton(text=project) for project in PROJECTS]]
        project_buttons.append([BACK_BUTTON])
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –∏–∑ –º–µ–Ω—é.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=project_buttons,
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    project = text
    logger.info(f"User {user_id} selected project: {project}")
    await state.update_data(project=project)
    await state.set_state(OrderForm.server)

    servers = PROJECT_SERVERS[project]
    server_buttons = []
    for i in range(0, len(servers), 2):
        row = [types.KeyboardButton(text=server) for server in servers[i:i+2]]
        server_buttons.append(row)
    server_buttons.append([BACK_BUTTON])

    await bot.send_message(
        chat_id=message.chat.id,
        text=f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª –ø—Ä–æ–µ–∫—Ç: *{project}*.\n"
             "üåç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä:",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=server_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
@router.message(OrderForm.server)
async def process_server(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.project)
        project_buttons = [[types.KeyboardButton(text=project) for project in PROJECTS]]
        project_buttons.append([BACK_BUTTON])

        data = await state.get_data()
        action = data.get("action", "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ")

        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: *{action}*.\n"
                 "üåê –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=project_buttons,
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    data = await state.get_data()
    project = data.get("project")
    valid_servers = PROJECT_SERVERS.get(project, [])
    if text not in valid_servers:
        servers = PROJECT_SERVERS[project]
        server_buttons = []
        for i in range(0, len(servers), 2):
            row = [types.KeyboardButton(text=server) for server in servers[i:i+2]]
            server_buttons.append(row)
        server_buttons.append([BACK_BUTTON])
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –∏–∑ –º–µ–Ω—é.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=server_buttons,
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    server = text
    logger.info(f"User {user_id} selected server: {server}")
    await state.update_data(server=server)
    await state.set_state(OrderForm.amount)

    await bot.send_message(
        chat_id=message.chat.id,
        text=f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–µ—Ä: *{server}*.\n"
             "üíµ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É (–æ—Ç 1–∫–∫ –¥–æ 100–∫–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12–∫–∫):",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[BACK_BUTTON]],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@router.message(OrderForm.amount)
async def process_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.server)
        data = await state.get_data()
        project = data.get("project")
        servers = PROJECT_SERVERS[project]
        server_buttons = []
        for i in range(0, len(servers), 2):
            row = [types.KeyboardButton(text=server) for server in servers[i:i+2]]
            server_buttons.append(row)
        server_buttons.append([BACK_BUTTON])

        await bot.send_message(
            chat_id=message.chat.id,
            text=f"üåç –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ *{project}*:",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=server_buttons,
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    match = re.match(r'^(\d{1,3})–∫–∫$', text)
    if not match:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—É–º–º—É –æ—Ç 1–∫–∫ –¥–æ 100–∫–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12–∫–∫).",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[BACK_BUTTON]],
                resize_keyboard=True
            )
        )
        return

    amount_kk = int(match.group(1))
    if not 1 <= amount_kk <= 100:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1–∫–∫ –¥–æ 100–∫–∫.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[BACK_BUTTON]],
                resize_keyboard=True
            )
        )
        return

    logger.info(f"User {user_id} entered amount: {amount_kk}–∫–∫")
    await state.update_data(amount_kk=amount_kk)
    data = await state.get_data()
    if data['action'] == "–ö—É–ø–∏—Ç—å":
        price_rub = amount_kk * 1600
    else:
        price_rub = amount_kk * 900
    await state.update_data(price_rub=price_rub)

    await state.set_state(OrderForm.payment_type)

    await bot.send_message(
        chat_id=message.chat.id,
        text=f"‚úÖ –¢—ã –≤–≤—ë–ª —Å—É–º–º—É: *{amount_kk}–∫–∫*.\n"
             f"üí≥ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞"), types.KeyboardButton(text="üì± –°–ë–ü")],
                [types.KeyboardButton(text="üí≤ USDT"), types.KeyboardButton(text="‚Çø BTC")],
                [BACK_BUTTON]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
@router.message(OrderForm.payment_type)
async def process_payment_type(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.amount)
        data = await state.get_data()
        amount_kk = data.get("amount_kk", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É (–æ—Ç 1–∫–∫ –¥–æ 100–∫–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12–∫–∫). –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: *{amount_kk}–∫–∫*.",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[BACK_BUTTON]],
                resize_keyboard=True
            )
        )
        return

    valid_payments = ["üí≥ –ö–∞—Ä—Ç–∞", "üì± –°–ë–ü", "üí≤ USDT", "‚Çø BTC"]
    if text not in valid_payments:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã –∏–∑ –º–µ–Ω—é.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞"), types.KeyboardButton(text="üì± –°–ë–ü")],
                    [types.KeyboardButton(text="üí≤ USDT"), types.KeyboardButton(text="‚Çø BTC")],
                    [BACK_BUTTON]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    payment_type = text.replace("üí≥ ", "").replace("üì± ", "").replace("üí≤ ", "").replace("‚Çø ", "")
    logger.info(f"User {user_id} selected payment type: {payment_type}")
    await state.update_data(payment_type=payment_type)
    await state.update_data(user_id=user_id)
    await state.update_data(username=message.from_user.username or "No username")

    data = await state.get_data()
    order_text = (
        f"üìã –ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑:\n\n"
        f"–î–µ–π—Å—Ç–≤–∏–µ: *{data['action']}*\n"
        f"–ü—Ä–æ–µ–∫—Ç: *{data['project']}*\n"
        f"–°–µ—Ä–≤–µ—Ä: *{data['server']}*\n"
        f"–°—É–º–º–∞: *{data['amount_kk']}–∫–∫*\n"
        f"–¶–µ–Ω–∞: *{data['price_rub']} RUB*\n"
        f"–û–ø–ª–∞—Ç–∞: *{data['payment_type']}*"
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=order_text,
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
                [BACK_BUTTON]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(OrderForm.confirm)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.message(OrderForm.confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.payment_type)
        await bot.send_message(
            chat_id=message.chat.id,
            text="üí≥ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞"), types.KeyboardButton(text="üì± –°–ë–ü")],
                    [types.KeyboardButton(text="üí≤ USDT"), types.KeyboardButton(text="‚Çø BTC")],
                    [BACK_BUTTON]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"User {user_id} cancelled the order")
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
        return

    if text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
                    [BACK_BUTTON]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    action = data['action']
    project = data['project']
    server = data['server']
    amount_kk = data['amount_kk']
    price_rub = data['price_rub']
    payment_type = data['payment_type']
    username = data['username']
    order_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_status = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã (Payop —Ç–µ—Å—Ç)"
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"üîó –ü–µ—Ä–µ–π–¥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã (—Ç–µ—Å—Ç): {PAYOP_TEST_LINK}",
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_message = (
        f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #ID{user_id}*\n\n"
        f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: {order_time}\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: @{username} (ID: {user_id})\n"
        f"üéØ *–î–µ–π—Å—Ç–≤–∏–µ*: {action}\n"
        f"üéÆ *–ü—Ä–æ–µ–∫—Ç*: {project}\n"
        f"üåç *–°–µ—Ä–≤–µ—Ä*: {server}\n"
        f"üí∞ *–°—É–º–º–∞*: {amount_kk}–∫–∫\n"
        f"üí∏ *–¶–µ–Ω–∞*: {price_rub} RUB\n"
        f"üí≥ *–¢–∏–ø –æ–ø–ª–∞—Ç—ã*: {payment_type}\n"
        f"üìä *–°—Ç–∞—Ç—É—Å*: {payment_status}\n\n"
        f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É*: [Payop Test]({PAYOP_TEST_LINK})"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        logger.info(f"Sending order notification to admin (chat_id: {ADMIN_CHAT_ID})")
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        logger.info(f"Order notification sent to admin successfully")
    except Exception as e:
        logger.error(f"Failed to send notification to admin: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞. –ú—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!"
        )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    logger.info(f"User {user_id} confirmed the order")
    await bot.send_message(
        chat_id=message.chat.id,
        text="‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–ø–ª–∞—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    await bot.send_message(
        chat_id=message.chat.id,
        text="üîÑ –•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="/start")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def help_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested help")
    await bot.send_message(
        chat_id=message.chat.id,
        text="‚ÑπÔ∏è –ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –≤–∏—Ä—Ç–æ–≤ GTA 5 RP –∏ Majestic RP.\n"
             "–ö–æ–º–∞–Ω–¥—ã:\n"
             "/start ‚Äî –ù–∞—á–∞—Ç—å\n"
             "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞\n\n"
             "üìã –í—ã–±–µ—Ä–∏ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å, –∑–∞—Ç–µ–º –ø—Ä–æ–µ–∫—Ç, —Å–µ—Ä–≤–µ—Ä, —Å—É–º–º—É (1–∫–∫‚Äì100–∫–∫).\n"
             "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Payop (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def delete_webhook_with_retries(max_retries=3, delay=5):
    for attempt in range(max_retries):
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted successfully")
            return True
        except TelegramNetworkError as e:
            logger.error(f"Failed to delete webhook (attempt {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(delay)
    return False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è polling
async def main():
    from aiogram import Dispatcher
    dp = Dispatcher(bot=bot, storage=storage)
    dp.include_router(router)

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    if not await delete_webhook_with_retries():
        logger.error("Failed to delete webhook after all retries. Continuing anyway...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    while True:
        try:
            await dp.start_polling(allowed_updates=["message"])
        except TelegramNetworkError as e:
            logger.error(f"Network error during polling: {e}")
            await asyncio.sleep(15)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        except Exception as e:
            logger.error(f"Unexpected error during polling: {e}")
            logger.info("Bot stopped, restarting...")
            await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == "__main__":
    asyncio.run(main())
